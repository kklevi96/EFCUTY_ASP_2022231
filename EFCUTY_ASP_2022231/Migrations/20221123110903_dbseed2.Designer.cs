// <auto-generated />
using System;
using EFCUTY_ASP_2022231.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFCUTY_ASP_2022231.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221123110903_dbseed2")]
    partial class dbseed2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EFCUTY_ASP_2022231.Models.Comment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EditCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastEdited")
                        .HasColumnType("datetime2");

                    b.Property<string>("PostId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SiteUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("SiteUserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = "bfb370a3-263a-4127-971d-706541e01b02",
                            Content = "Ne felejtse el, hogy én is látom, ne tegezzen mindenkit csak úgy.\nEgyébként tesztes kérdések lesznek, Marshall-keresztet mindenképp nézzék át!",
                            EditCount = 0,
                            PostId = "a9022b00-d683-46fb-858f-383b2e1c93c6",
                            SiteUserId = "0ec37df0-916d-464d-a8f6-9d3c0dc97848",
                            Timestamp = new DateTime(2022, 10, 28, 8, 15, 28, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "c35b13b8-c415-44af-a6fd-9dc49dc309df",
                            Content = "Figyelj oda, hogy ez nem az sztf topik! Egyébként matekról meg progról is négy hiányzásnál letiltanak.",
                            EditCount = 0,
                            PostId = "497b04f7-3b5e-417b-9080-ed0a8adc729a",
                            SiteUserId = "8b7de85f-3ef6-48d6-9fb8-ae666ed39c43",
                            Timestamp = new DateTime(2022, 10, 29, 8, 13, 28, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "5654c02e-715b-40e1-acfd-41331797b6a7",
                            Content = "Nekem se megy, meg szerintem senkinek se, mindenkinek bukó lesz a zh:D",
                            EditCount = 0,
                            PostId = "7bc16cac-943e-4b54-b161-9f5ff3ce5d26",
                            SiteUserId = "5d16e2fc-89c7-42d2-8628-1b19b19650ae",
                            Timestamp = new DateTime(2022, 9, 10, 8, 15, 28, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "8e8e006c-8206-4c30-9885-8deac3f52be4",
                            Content = "Mondjuk nem is volt olyan rossz, 69% lett a zh-m^^",
                            EditCount = 0,
                            PostId = "7bc16cac-943e-4b54-b161-9f5ff3ce5d26",
                            SiteUserId = "ef2c07be-a9fb-4548-ba12-e2201018a7de",
                            Timestamp = new DateTime(2022, 10, 20, 21, 15, 28, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "4411667d-a822-4d61-986e-b36700c6bae3",
                            Content = "Ne szívass, akkor meg mit problémáztál szeptemberben? Én mehetek pótzh-ra...",
                            EditCount = 0,
                            PostId = "7bc16cac-943e-4b54-b161-9f5ff3ce5d26",
                            SiteUserId = "5d16e2fc-89c7-42d2-8628-1b19b19650ae",
                            Timestamp = new DateTime(2022, 10, 22, 11, 5, 33, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("EFCUTY_ASP_2022231.Models.Post", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EditCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastEdited")
                        .HasColumnType("datetime2");

                    b.Property<string>("SiteUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SubjectCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SiteUserId");

                    b.HasIndex("SubjectCode");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = "a9022b00-d683-46fb-858f-383b2e1c93c6",
                            Content = "Sziasztok! Tudtok valamit, hogy mi lesz a jövő heti zh-ban?",
                            EditCount = 0,
                            SiteUserId = "8b7de85f-3ef6-48d6-9fb8-ae666ed39c43",
                            SubjectCode = "KGK666BUKO",
                            Timestamp = new DateTime(2022, 10, 23, 11, 15, 28, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "497b04f7-3b5e-417b-9080-ed0a8adc729a",
                            Content = "Hányat lehet hiányozni sztf laboron?",
                            EditCount = 0,
                            SiteUserId = "4799780d-a03f-471a-9622-c4866dd0f5bc",
                            SubjectCode = "NIXMN1HBNE",
                            Timestamp = new DateTime(2022, 10, 15, 11, 11, 22, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "7bc16cac-943e-4b54-b161-9f5ff3ce5d26",
                            Content = "Határérték-számításban tud valaki segíteni?",
                            EditCount = 0,
                            SiteUserId = "ef2c07be-a9fb-4548-ba12-e2201018a7de",
                            SubjectCode = "NIXMN1HBNE",
                            Timestamp = new DateTime(2022, 9, 7, 7, 45, 28, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "905e51c3-9c04-40e9-97de-9cd0186ab687",
                            Content = "Kedves mindenki! Ugye tudják, hogy a zárthelyi dolgozatot kiválthatják beadandó dolgozat megírásával?\nDe akkor legfeljebb hármast tudok majd adni.",
                            EditCount = 0,
                            SiteUserId = "0ec37df0-916d-464d-a8f6-9d3c0dc97848",
                            SubjectCode = "KGK666BUKO",
                            Timestamp = new DateTime(2022, 10, 29, 8, 15, 28, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "58170dd4-a18e-4d39-9d29-94482c9a0121",
                            Content = "Jövő héten lesz óra?",
                            EditCount = 0,
                            SiteUserId = "5d16e2fc-89c7-42d2-8628-1b19b19650ae",
                            SubjectCode = "NIXBE1PBNE",
                            Timestamp = new DateTime(2022, 10, 28, 8, 15, 28, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("EFCUTY_ASP_2022231.Models.Subject", b =>
                {
                    b.Property<string>("SubjectCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CreditValue")
                        .HasColumnType("int");

                    b.Property<bool>("ExamSubject")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.HasKey("SubjectCode");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            SubjectCode = "NIXMN1HBNE",
                            CreditValue = 7,
                            ExamSubject = true,
                            Name = "Analízis 1",
                            Semester = 1
                        },
                        new
                        {
                            SubjectCode = "NIXSF1HBNE",
                            CreditValue = 7,
                            ExamSubject = true,
                            Name = "Szoftvertervezés és -fejlesztés 1.",
                            Semester = 1
                        },
                        new
                        {
                            SubjectCode = "NIXSF2HBNE",
                            CreditValue = 7,
                            ExamSubject = true,
                            Name = "Szoftvertervezés és -fejlesztés 2.",
                            Semester = 2
                        },
                        new
                        {
                            SubjectCode = "NIXBE1PBNE",
                            CreditValue = 3,
                            ExamSubject = true,
                            Name = "Beágyazott és érzékelőalapú rendszerek",
                            Semester = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EFCUTY_ASP_2022231.Models.SiteUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Data")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("SiteUser");

                    b.HasData(
                        new
                        {
                            Id = "8b7de85f-3ef6-48d6-9fb8-ae666ed39c43",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b352f0c6-e8da-4714-99ab-ce5cbab1e712",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "BELA.KOVACS@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJb5/6HEI0B27RtTwH8YFufe9Ei7+a1PV6iQLEvDVbPbEhlgT2euPovpFEb1iKsriA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "185f322d-c1e4-4b15-9253-c42aad776f7f",
                            TwoFactorEnabled = false,
                            UserName = "bela.kovacs@gmail.com",
                            FirstName = "Béla",
                            LastName = "Kovács"
                        },
                        new
                        {
                            Id = "4799780d-a03f-471a-9622-c4866dd0f5bc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "95b819fd-981f-445f-85af-39363040829b",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "JOZSEFKISS@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPqXDGfAsCS0zKfpnWyM7vHnCy+ULujmN+BfhVh5p6sd/UapluEEwfMIYgL9Io76fg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "046df45d-a7f4-4c28-9e9c-926f9d9bb2a5",
                            TwoFactorEnabled = false,
                            UserName = "jozsefkiss@gmail.com",
                            FirstName = "József",
                            LastName = "Kiss"
                        },
                        new
                        {
                            Id = "ef2c07be-a9fb-4548-ba12-e2201018a7de",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "350de7c8-d57d-4fe6-848a-cd1b8c96b67d",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ISTVANTAKACS@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIICwlR503dpnnQy6C6FJGoPkqHSXdcBKP0h40Ruami/hf6x4KMSffb7jgSXz+NwEw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4905909c-e9ca-4378-96e4-63ece924db61",
                            TwoFactorEnabled = false,
                            UserName = "istvantakacs@gmail.com",
                            FirstName = "Ferenc",
                            LastName = "Kovács"
                        },
                        new
                        {
                            Id = "0ec37df0-916d-464d-a8f6-9d3c0dc97848",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9bc36164-ac9b-4da4-84aa-6c1024050220",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "MARIANNKISS@UNI-OBUDA.HU",
                            PasswordHash = "AQAAAAEAACcQAAAAEOiVy1bKH3/jkDFGmWAz/G0QtcBahTyFJtyrS5miBp24gKB48De6etWWt//hSkkZhw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "77b0e49b-76d0-417a-9e73-cfb2fe21a444",
                            TwoFactorEnabled = false,
                            UserName = "mariannkiss@uni-obuda.hu",
                            FirstName = "Mariann",
                            LastName = "Kiss"
                        });
                });

            modelBuilder.Entity("EFCUTY_ASP_2022231.Models.Comment", b =>
                {
                    b.HasOne("EFCUTY_ASP_2022231.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCUTY_ASP_2022231.Models.SiteUser", "Author")
                        .WithMany()
                        .HasForeignKey("SiteUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("EFCUTY_ASP_2022231.Models.Post", b =>
                {
                    b.HasOne("EFCUTY_ASP_2022231.Models.SiteUser", "Author")
                        .WithMany()
                        .HasForeignKey("SiteUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EFCUTY_ASP_2022231.Models.Subject", "Subject")
                        .WithMany("Posts")
                        .HasForeignKey("SubjectCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFCUTY_ASP_2022231.Models.Post", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("EFCUTY_ASP_2022231.Models.Subject", b =>
                {
                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
