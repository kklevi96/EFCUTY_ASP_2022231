// <auto-generated />
using System;
using EFCUTY_ASP_2022231.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFCUTY_ASP_2022231.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230527224413_apiinit2")]
    partial class apiinit2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EFCUTY_ASP_2022231.Models.ApiUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dcc99930-fcf5-4730-be6c-fc0ad9d4a836",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "78c6aa8f-1a31-47de-a2f0-99fe8920c37c",
                            EmailConfirmed = false,
                            FirstName = "Béla",
                            LastName = "Kovács",
                            LockoutEnabled = false,
                            NormalizedUserName = "BELA.KOVACS@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBmPjBNlOoXb9YTdQW0+T3T0OfMNsqjXBo8PmCA9VvMr3yNkggr3CIKmemN/RtXlWg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fed5bbbf-b3fa-41b7-9476-3e7f4a0868ee",
                            TwoFactorEnabled = false,
                            UserName = "bela.kovacs@gmail.com"
                        },
                        new
                        {
                            Id = "35806983-b7c1-4704-b396-6f3510d13393",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "daf02808-0240-4d9f-93c0-ce2507bcecf4",
                            EmailConfirmed = false,
                            FirstName = "József",
                            LastName = "Kiss",
                            LockoutEnabled = false,
                            NormalizedUserName = "JOZSEFKISS@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBt6kogaA0iZm2CV8Qws1tmXyVF1Eog0URhx+icafMW05zcUTGkgn019aaUszcTAqw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "87f5eaf8-1154-42eb-bed9-76817ab0b00b",
                            TwoFactorEnabled = false,
                            UserName = "jozsefkiss@gmail.com"
                        },
                        new
                        {
                            Id = "0f04559c-ceb0-45c6-9b3b-35e9781b4bfd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3d3874fc-ea7c-40b4-927a-bbc4d557cd09",
                            EmailConfirmed = false,
                            FirstName = "Ferenc",
                            LastName = "Kovács",
                            LockoutEnabled = false,
                            NormalizedUserName = "ISTVANTAKACS@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEA49xa4aAA/uefo479T4B5+Q56gsfUoUMcMKHxlGXjjeeaOgUTjXFpRz2Iws/wfW/w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "723671f2-a00b-4356-83ae-4129c70dfc37",
                            TwoFactorEnabled = false,
                            UserName = "istvantakacs@gmail.com"
                        },
                        new
                        {
                            Id = "98f59a86-4808-4f0f-8b51-1fb8e55eb321",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ec0cda04-9009-4165-bc5f-5cef88452a06",
                            EmailConfirmed = false,
                            FirstName = "Mariann",
                            LastName = "Kiss",
                            LockoutEnabled = false,
                            NormalizedUserName = "MARIANNKISS@UNI-OBUDA.HU",
                            PasswordHash = "AQAAAAEAACcQAAAAEM67HF+ofUUwfqtR3RJ7s7I8xib7VvwL3Cxa2BI69JLDzy0QK1hGIhabCqhzQBYzTg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c254a00c-81a4-4e53-b057-672bce54ffe7",
                            TwoFactorEnabled = false,
                            UserName = "mariannkiss@uni-obuda.hu"
                        },
                        new
                        {
                            Id = "a43ba7a2-896b-4fa7-b41d-6ecb4723b5d0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f232d90c-6997-4b5a-8d59-e566ac9cc3cf",
                            EmailConfirmed = false,
                            FirstName = "Júlia",
                            LastName = "Horváth",
                            LockoutEnabled = false,
                            NormalizedUserName = "JULIAHORVATH@YAHOO.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPLUkQodL+dRzvAc/wrmk+2R6oS1K73wbUICYFtfCZSBojroDnnD88hEnPu0ZZdvvg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8e4534e0-31b0-44bd-b6dd-6a51fae94419",
                            TwoFactorEnabled = false,
                            UserName = "juliahorvath@yahoo.com"
                        });
                });

            modelBuilder.Entity("EFCUTY_ASP_2022231.Models.Comment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EditCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastEdited")
                        .HasColumnType("datetime2");

                    b.Property<string>("PostId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SiteUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("SiteUserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = "edd18bb6-6ef2-4638-a73f-806902266183",
                            Content = "Ne felejtse el, hogy én is látom, ne tegezzen mindenkit csak úgy.\nEgyébként tesztes kérdések lesznek, Marshall-keresztet mindenképp nézzék át!",
                            EditCount = 0,
                            PostId = "86749716-3490-4914-8bfb-7bb92e5f52c9",
                            SiteUserId = "98f59a86-4808-4f0f-8b51-1fb8e55eb321",
                            Timestamp = new DateTime(2022, 10, 28, 8, 15, 28, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "b719a349-ac37-4e79-85a8-6c3854027b95",
                            Content = "Figyelj oda, hogy ez nem az sztf topik! Egyébként matekról meg progról is négy hiányzásnál letiltanak.",
                            EditCount = 0,
                            PostId = "8f5b166d-43e7-4592-b365-b24b3b3220e2",
                            SiteUserId = "dcc99930-fcf5-4730-be6c-fc0ad9d4a836",
                            Timestamp = new DateTime(2022, 10, 29, 8, 13, 28, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "3f4d4861-3984-45f1-8f2c-f5ae78e954bc",
                            Content = "Nekem se megy, meg szerintem senkinek se, mindenkinek bukó lesz a zh:D",
                            EditCount = 0,
                            PostId = "b0dde3b8-70b5-4295-a18d-f0649e7407e9",
                            SiteUserId = "a43ba7a2-896b-4fa7-b41d-6ecb4723b5d0",
                            Timestamp = new DateTime(2022, 9, 10, 8, 15, 28, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "fa5fec09-647f-4d56-9861-9334a5e3b461",
                            Content = "Mondjuk nem is volt olyan rossz, 69% lett a zh-m^^",
                            EditCount = 0,
                            PostId = "b0dde3b8-70b5-4295-a18d-f0649e7407e9",
                            SiteUserId = "0f04559c-ceb0-45c6-9b3b-35e9781b4bfd",
                            Timestamp = new DateTime(2022, 10, 20, 21, 15, 28, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "bab7742d-3183-4934-9ee2-95c152f63b10",
                            Content = "Ne szívass, akkor meg mit problémáztál szeptemberben? Én mehetek pótzh-ra...",
                            EditCount = 0,
                            PostId = "b0dde3b8-70b5-4295-a18d-f0649e7407e9",
                            SiteUserId = "a43ba7a2-896b-4fa7-b41d-6ecb4723b5d0",
                            Timestamp = new DateTime(2022, 10, 22, 11, 5, 33, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("EFCUTY_ASP_2022231.Models.Post", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EditCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastEdited")
                        .HasColumnType("datetime2");

                    b.Property<string>("SiteUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SubjectCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SiteUserId");

                    b.HasIndex("SubjectCode");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = "86749716-3490-4914-8bfb-7bb92e5f52c9",
                            Content = "Sziasztok! Tudtok valamit, hogy mi lesz a jövő heti zh-ban?",
                            EditCount = 0,
                            SiteUserId = "dcc99930-fcf5-4730-be6c-fc0ad9d4a836",
                            SubjectCode = "KGK666BUKO",
                            Timestamp = new DateTime(2022, 10, 23, 11, 15, 28, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "8f5b166d-43e7-4592-b365-b24b3b3220e2",
                            Content = "Hányat lehet hiányozni sztf laboron?",
                            EditCount = 0,
                            SiteUserId = "35806983-b7c1-4704-b396-6f3510d13393",
                            SubjectCode = "NIXMN1HBNE",
                            Timestamp = new DateTime(2022, 10, 15, 11, 11, 22, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "b0dde3b8-70b5-4295-a18d-f0649e7407e9",
                            Content = "Határérték-számításban tud valaki segíteni?",
                            EditCount = 0,
                            SiteUserId = "0f04559c-ceb0-45c6-9b3b-35e9781b4bfd",
                            SubjectCode = "NIXMN1HBNE",
                            Timestamp = new DateTime(2022, 9, 7, 7, 45, 28, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "d3dd4ab6-2a12-4212-9177-6b2d9e8ddede",
                            Content = "Kedves mindenki! Ugye tudják, hogy a zárthelyi dolgozatot kiválthatják beadandó dolgozat megírásával?\nDe akkor legfeljebb hármast tudok majd adni.",
                            EditCount = 0,
                            SiteUserId = "98f59a86-4808-4f0f-8b51-1fb8e55eb321",
                            SubjectCode = "KGK666BUKO",
                            Timestamp = new DateTime(2022, 10, 29, 8, 15, 28, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "782e6967-67cd-40de-82fc-e79d4a535dab",
                            Content = "Jövő héten lesz óra?",
                            EditCount = 0,
                            SiteUserId = "a43ba7a2-896b-4fa7-b41d-6ecb4723b5d0",
                            SubjectCode = "NIXBE1PBNE",
                            Timestamp = new DateTime(2022, 10, 28, 8, 15, 28, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("EFCUTY_ASP_2022231.Models.Subject", b =>
                {
                    b.Property<string>("SubjectCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CreditValue")
                        .HasColumnType("int");

                    b.Property<bool>("ExamSubject")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.HasKey("SubjectCode");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            SubjectCode = "NIXMN1HBNE",
                            CreditValue = 7,
                            ExamSubject = true,
                            Name = "Analízis 1",
                            Semester = 1
                        },
                        new
                        {
                            SubjectCode = "NIXSF1HBNE",
                            CreditValue = 7,
                            ExamSubject = true,
                            Name = "Szoftvertervezés és -fejlesztés 1.",
                            Semester = 1
                        },
                        new
                        {
                            SubjectCode = "NIXSF2HBNE",
                            CreditValue = 7,
                            ExamSubject = true,
                            Name = "Szoftvertervezés és -fejlesztés 2.",
                            Semester = 2
                        },
                        new
                        {
                            SubjectCode = "NIXBE1PBNE",
                            CreditValue = 3,
                            ExamSubject = true,
                            Name = "Beágyazott és érzékelőalapú rendszerek",
                            Semester = 2
                        },
                        new
                        {
                            SubjectCode = "KGK666BUKO",
                            CreditValue = 15,
                            ExamSubject = false,
                            Name = "Mikro- és makroökonómia",
                            Semester = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EFCUTY_ASP_2022231.Models.Comment", b =>
                {
                    b.HasOne("EFCUTY_ASP_2022231.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCUTY_ASP_2022231.Models.ApiUser", "Author")
                        .WithMany()
                        .HasForeignKey("SiteUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("EFCUTY_ASP_2022231.Models.Post", b =>
                {
                    b.HasOne("EFCUTY_ASP_2022231.Models.ApiUser", "Author")
                        .WithMany()
                        .HasForeignKey("SiteUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EFCUTY_ASP_2022231.Models.Subject", "Subject")
                        .WithMany("Posts")
                        .HasForeignKey("SubjectCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EFCUTY_ASP_2022231.Models.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EFCUTY_ASP_2022231.Models.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCUTY_ASP_2022231.Models.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EFCUTY_ASP_2022231.Models.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFCUTY_ASP_2022231.Models.Post", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("EFCUTY_ASP_2022231.Models.Subject", b =>
                {
                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
