// <auto-generated />
using System;
using EFCUTY_ASP_2022231.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFCUTY_ASP_2022231.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221127155047_final2")]
    partial class final2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EFCUTY_ASP_2022231.Models.Comment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EditCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastEdited")
                        .HasColumnType("datetime2");

                    b.Property<string>("PostId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SiteUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("SiteUserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = "ba6e3191-6817-4fcf-90ef-5d5045df9fc4",
                            Content = "Ne felejtse el, hogy én is látom, ne tegezzen mindenkit csak úgy.\nEgyébként tesztes kérdések lesznek, Marshall-keresztet mindenképp nézzék át!",
                            EditCount = 0,
                            PostId = "31ed54bb-1fa5-430c-a965-06b65b7164ed",
                            SiteUserId = "4487b2cc-2e4a-4494-b8eb-8a448701e371",
                            Timestamp = new DateTime(2022, 10, 28, 8, 15, 28, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "50590d26-0a29-4910-b985-3a322d343368",
                            Content = "Figyelj oda, hogy ez nem az sztf topik! Egyébként matekról meg progról is négy hiányzásnál letiltanak.",
                            EditCount = 0,
                            PostId = "dc78bd1e-80ce-4e0e-a03b-f91327b62378",
                            SiteUserId = "13dd7181-a74c-4baf-9574-85ab30a5f5e3",
                            Timestamp = new DateTime(2022, 10, 29, 8, 13, 28, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "8b53c519-67f9-479e-881a-fae3704cbd60",
                            Content = "Nekem se megy, meg szerintem senkinek se, mindenkinek bukó lesz a zh:D",
                            EditCount = 0,
                            PostId = "138c5159-e3e0-4f06-a118-81062f1f1f61",
                            SiteUserId = "3cc3ef7f-bc8e-461c-8271-4ac357cddd64",
                            Timestamp = new DateTime(2022, 9, 10, 8, 15, 28, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "5f777676-f965-4267-9460-672b76c0f215",
                            Content = "Mondjuk nem is volt olyan rossz, 69% lett a zh-m^^",
                            EditCount = 0,
                            PostId = "138c5159-e3e0-4f06-a118-81062f1f1f61",
                            SiteUserId = "88e6c8ee-bd0d-4a15-9b90-21514eccae4f",
                            Timestamp = new DateTime(2022, 10, 20, 21, 15, 28, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "6e392491-71d4-418d-97cd-0c3f561ef5f3",
                            Content = "Ne szívass, akkor meg mit problémáztál szeptemberben? Én mehetek pótzh-ra...",
                            EditCount = 0,
                            PostId = "138c5159-e3e0-4f06-a118-81062f1f1f61",
                            SiteUserId = "3cc3ef7f-bc8e-461c-8271-4ac357cddd64",
                            Timestamp = new DateTime(2022, 10, 22, 11, 5, 33, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("EFCUTY_ASP_2022231.Models.Post", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EditCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastEdited")
                        .HasColumnType("datetime2");

                    b.Property<string>("SiteUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SubjectCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SiteUserId");

                    b.HasIndex("SubjectCode");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = "31ed54bb-1fa5-430c-a965-06b65b7164ed",
                            Content = "Sziasztok! Tudtok valamit, hogy mi lesz a jövő heti zh-ban?",
                            EditCount = 0,
                            SiteUserId = "13dd7181-a74c-4baf-9574-85ab30a5f5e3",
                            SubjectCode = "KGK666BUKO",
                            Timestamp = new DateTime(2022, 10, 23, 11, 15, 28, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "dc78bd1e-80ce-4e0e-a03b-f91327b62378",
                            Content = "Hányat lehet hiányozni sztf laboron?",
                            EditCount = 0,
                            SiteUserId = "cb2a61c1-3c9d-4b65-8f79-ccf91caa89a2",
                            SubjectCode = "NIXMN1HBNE",
                            Timestamp = new DateTime(2022, 10, 15, 11, 11, 22, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "138c5159-e3e0-4f06-a118-81062f1f1f61",
                            Content = "Határérték-számításban tud valaki segíteni?",
                            EditCount = 0,
                            SiteUserId = "88e6c8ee-bd0d-4a15-9b90-21514eccae4f",
                            SubjectCode = "NIXMN1HBNE",
                            Timestamp = new DateTime(2022, 9, 7, 7, 45, 28, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "98d55237-599d-43e9-b3dd-33423c9344fc",
                            Content = "Kedves mindenki! Ugye tudják, hogy a zárthelyi dolgozatot kiválthatják beadandó dolgozat megírásával?\nDe akkor legfeljebb hármast tudok majd adni.",
                            EditCount = 0,
                            SiteUserId = "4487b2cc-2e4a-4494-b8eb-8a448701e371",
                            SubjectCode = "KGK666BUKO",
                            Timestamp = new DateTime(2022, 10, 29, 8, 15, 28, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "b59674e6-7b78-43ad-9c8e-7594be96410e",
                            Content = "Jövő héten lesz óra?",
                            EditCount = 0,
                            SiteUserId = "3cc3ef7f-bc8e-461c-8271-4ac357cddd64",
                            SubjectCode = "NIXBE1PBNE",
                            Timestamp = new DateTime(2022, 10, 28, 8, 15, 28, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("EFCUTY_ASP_2022231.Models.Subject", b =>
                {
                    b.Property<string>("SubjectCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CreditValue")
                        .HasColumnType("int");

                    b.Property<bool>("ExamSubject")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.HasKey("SubjectCode");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            SubjectCode = "NIXMN1HBNE",
                            CreditValue = 7,
                            ExamSubject = true,
                            Name = "Analízis 1",
                            Semester = 1
                        },
                        new
                        {
                            SubjectCode = "NIXSF1HBNE",
                            CreditValue = 7,
                            ExamSubject = true,
                            Name = "Szoftvertervezés és -fejlesztés 1.",
                            Semester = 1
                        },
                        new
                        {
                            SubjectCode = "NIXSF2HBNE",
                            CreditValue = 7,
                            ExamSubject = true,
                            Name = "Szoftvertervezés és -fejlesztés 2.",
                            Semester = 2
                        },
                        new
                        {
                            SubjectCode = "NIXBE1PBNE",
                            CreditValue = 3,
                            ExamSubject = true,
                            Name = "Beágyazott és érzékelőalapú rendszerek",
                            Semester = 2
                        },
                        new
                        {
                            SubjectCode = "KGK666BUKO",
                            CreditValue = 15,
                            ExamSubject = false,
                            Name = "Mikro- és makroökonómia",
                            Semester = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EFCUTY_ASP_2022231.Models.SiteUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("SiteUser");

                    b.HasData(
                        new
                        {
                            Id = "13dd7181-a74c-4baf-9574-85ab30a5f5e3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c71f1b00-bf37-486f-8f49-88c2271e77e2",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "BELA.KOVACS@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHi5cyGEecM687CM6XXQ+rJY2hn8ingLVV/uykxE9nCezFnHazf5TyE8AY2Az6bnxw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "645f6aac-9a8b-4fbe-a150-a3e62d871df7",
                            TwoFactorEnabled = false,
                            UserName = "bela.kovacs@gmail.com",
                            FirstName = "Béla",
                            LastName = "Kovács"
                        },
                        new
                        {
                            Id = "cb2a61c1-3c9d-4b65-8f79-ccf91caa89a2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "14fd4f0c-51fc-4851-8eee-2f4dccc3b265",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "JOZSEFKISS@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELVzChkFXIXR1joIEFNMBw0GtXtPacDaDc22YB7uws0c8WVoeTSWsZWGCsMe25JZNA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4cb254b8-1f4f-4ece-bef8-8f303a724090",
                            TwoFactorEnabled = false,
                            UserName = "jozsefkiss@gmail.com",
                            FirstName = "József",
                            LastName = "Kiss"
                        },
                        new
                        {
                            Id = "88e6c8ee-bd0d-4a15-9b90-21514eccae4f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1680e943-4376-4958-a325-d18cc09d8035",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ISTVANTAKACS@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJVFbz3LzBPTbeLlS3AwGL8KQqHAJFGYJzSISm2EyL2IokA+ezcbZEuPa+CORWrL7w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2c7c3f69-9c6b-4913-ba69-37846ec87fa7",
                            TwoFactorEnabled = false,
                            UserName = "istvantakacs@gmail.com",
                            FirstName = "Ferenc",
                            LastName = "Kovács"
                        },
                        new
                        {
                            Id = "4487b2cc-2e4a-4494-b8eb-8a448701e371",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9fa87289-094a-423f-ad1c-f82c3d3e6193",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "MARIANNKISS@UNI-OBUDA.HU",
                            PasswordHash = "AQAAAAEAACcQAAAAENwjoctXHFwooobmNv+b+CMsF3QCnD1SL/tuRhrvqDobBDqfhJBCofu8sPwDWF77ow==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cfd46591-b288-4c49-b016-46cae7a38a9e",
                            TwoFactorEnabled = false,
                            UserName = "mariannkiss@uni-obuda.hu",
                            FirstName = "Mariann",
                            LastName = "Kiss"
                        },
                        new
                        {
                            Id = "3cc3ef7f-bc8e-461c-8271-4ac357cddd64",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2b8d40af-2bee-4a7c-8b9d-c1c1ec010e8c",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "JULIAHORVATH@YAHOO.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEI5PoDcqIb4uuhGUgE8Waeg5jXn4gW8ol+6DjVqfzB9zYC1ZV6Zxit+0wC1n982/iA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a5874d0e-8a35-46de-9181-eb1d46527166",
                            TwoFactorEnabled = false,
                            UserName = "juliahorvath@yahoo.com",
                            FirstName = "Júlia",
                            LastName = "Horváth"
                        });
                });

            modelBuilder.Entity("EFCUTY_ASP_2022231.Models.Comment", b =>
                {
                    b.HasOne("EFCUTY_ASP_2022231.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCUTY_ASP_2022231.Models.SiteUser", "Author")
                        .WithMany()
                        .HasForeignKey("SiteUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("EFCUTY_ASP_2022231.Models.Post", b =>
                {
                    b.HasOne("EFCUTY_ASP_2022231.Models.SiteUser", "Author")
                        .WithMany()
                        .HasForeignKey("SiteUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EFCUTY_ASP_2022231.Models.Subject", "Subject")
                        .WithMany("Posts")
                        .HasForeignKey("SubjectCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFCUTY_ASP_2022231.Models.Post", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("EFCUTY_ASP_2022231.Models.Subject", b =>
                {
                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
